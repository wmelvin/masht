import sys
from datetime import datetime, timezone
from pathlib import Path
from textwrap import dedent

import mistune

from masht.__about__ import __version__

app_name = "masht"

app_title = f"{app_name} (v.{__version__})"

run_dt_utc = datetime.now(tz=timezone.utc)


def html_style() -> str:
    s = """
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            padding: 1rem 4rem;
        }
        h1 { color: #88a; }
        h2 { color: #668; }
        h3 { color: #557; }
        h4 { color: #336; }
        h5 { color: #224; }
        table { border-collapse: collapse; }
        td, th {
            border: 1px solid silver;
            padding: 0.4rem 1rem;
        }
        blockquote {
            background-color: #edf2f7;
            border-left: 2px solid #777;
            margin-left: 0;
            padding: 0.2rem 1rem;
        }
        a:link, a:visited {
            color: #00248F;
            text-decoration: none;
        }
        :link:hover,:visited:hover {
            color: #B32400;
            text-decoration: underline;
        }
        #footer {
            border-top: 1px solid #77a;
            color: #77a;
            font-size: x-small;
            margin-top: 3rem;
            padding: 4px;
        }
    """
    return s.lstrip("\n").rstrip()


def html_head(source_md: Path) -> str:
    dts = datetime.fromtimestamp(source_md.stat().st_mtime).strftime("%Y-%m-%d %H:%M")
    return dedent(
        f"""
        <!DOCTYPE html>
        <!--
            This file was generated by {app_title}.
            Source Markdown document: {source_md.name}
            Source document modified: {dts}
        -->
        <html lang="en">
        <head>
            <title>{source_md.name} as HTML</title>
            <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
            <style>
            {html_style()}
            </style>
            <base target="_blank">
        </head>
        <body>
        """
    )


def html_tail(source_name: str) -> str:
    dts = run_dt_utc.astimezone().strftime("%Y-%m-%d %H:%M")
    return dedent(
        f"""
        <div id="footer">
           Source '{source_name}'. Created {dts}.
        </div>
        </body>
        </html>
        """
    )


#  Checks the Markdown for lists not preceeded by a blank line.
def check_md(md: str) -> None:
    lines = md.splitlines()
    prev_li = False
    prev_blank = True
    for i, line in enumerate(lines, start=1):
        is_li = line.startswith(("- ", "* "))
        if i > 1 and is_li and not (prev_li or prev_blank):
            print(f"WARNING: Lists should be preceeded by a blank line. At line {i}.")
        prev_li = is_li
        prev_blank = line == ""


def write_md_as_html(filename: str) -> None:
    md_path = Path(filename)
    print(f"Reading '{md_path}'.")

    if not md_path.exists():
        print(f"ERROR: '{md_path}' does not exist.")
        return

    if md_path.suffix.lower() != ".md":
        print(f"ERROR: '{md_path}' is not a Markdown file.")
        return

    out_path = md_path.with_suffix(".md.AS.html")
    print(f"Writing '{out_path}'.")

    html = html_head(md_path)

    md = md_path.read_text()
    check_md(md)

    as_html = mistune.html(md)

    html += as_html

    html += html_tail(md_path.name)

    out_path.write_text(html)


def main(arglist=None) -> int:
    print(f"\n{app_title}\n")

    if arglist is None:
        arglist = sys.argv[1:]

    usage_msg = "\nUSAGE: masht filename.md [filename2.md ...]\n"

    if len(arglist) < 1:
        print(usage_msg)
        return 1

    if arglist[0] == "-h" or arglist[0] == "--help":
        print(usage_msg)
        return 0

    for md_file in arglist:
        write_md_as_html(md_file)

    return 0


if __name__ == "__main__":
    main()
